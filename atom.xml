<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>绀香的blog</title>
  
  
  <link href="https://github.com/NieYongchao/nychao.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/NieYongchao/nychao.github.io/"/>
  <updated>2020-09-13T07:53:41.931Z</updated>
  <id>https://github.com/NieYongchao/nychao.github.io/</id>
  
  <author>
    <name>绀香</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深浅拷贝</title>
    <link href="https://github.com/NieYongchao/nychao.github.io/2020/09/13/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>https://github.com/NieYongchao/nychao.github.io/2020/09/13/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</id>
    <published>2020-09-13T07:26:45.264Z</published>
    <updated>2020-09-13T07:53:41.931Z</updated>
    
    <content type="html"><![CDATA[<h3 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h3><ul><li>基本数据类型拷贝后，会生成一份新的数据，生成的数据与原数据没有影响。</li><li>对象/数组的拷贝是引用，使用的是堆内存中的共同数据。</li><li>浅拷贝是拷贝的引用，会影响原数据。</li><li>深拷贝是生成的新数据，对原数据没有影响。</li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ol><li><h4 id="直接变量赋值"><a href="#直接变量赋值" class="headerlink" title="直接变量赋值"></a>直接变量赋值</h4></li><li><p><code>Object.assign</code>()</p></li><li><p><code>Array.prototype.concat()</code></p></li><li><p><code>Array.prototype.slice()</code></p></li><li><p><code>JSON.parse(JSON.stringify())</code></p></li></ol><h4 id="Object-assign-浅拷贝"><a href="#Object-assign-浅拷贝" class="headerlink" title="Object.assign()  (浅拷贝)"></a><code>Object.assign</code>()  (浅拷贝)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;nyc&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="built_in">Object</span>.assign(obj)</span><br><span class="line"><span class="built_in">console</span>.log(obj1.name)</span><br><span class="line"><span class="comment">//nyc</span></span><br><span class="line">obj1.name = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name)</span><br><span class="line"><span class="comment">//abc</span></span><br></pre></td></tr></table></figure><h4 id="Array-prototype-concat-浅拷贝"><a href="#Array-prototype-concat-浅拷贝" class="headerlink" title="Array.prototype.concat()(浅拷贝)"></a><code>Array.prototype.concat()</code>(浅拷贝)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">1</span>, <span class="number">2</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;nyc&#x27;</span> &#125;]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.concat()</span><br><span class="line">arr1[<span class="number">2</span>].name = <span class="string">&#x27;~~~&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="comment">//[ 1, 2, &#123; name: &#x27;~~~&#x27; &#125;]</span></span><br></pre></td></tr></table></figure><h4 id="Array-prototype-slice-浅拷贝"><a href="#Array-prototype-slice-浅拷贝" class="headerlink" title="Array.prototype.slice()(浅拷贝)"></a><code>Array.prototype.slice()</code>(浅拷贝)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">1</span>, <span class="number">2</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;nyc&#x27;</span> &#125;]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.slice()</span><br><span class="line">arr1[<span class="number">2</span>].name = <span class="string">&#x27;~~~&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="comment">//[ 1, 2, &#123; name: &#x27;~~~&#x27; &#125;]</span></span><br></pre></td></tr></table></figure><h4 id="JSON-parse-JSON-stringify-深拷贝，但不能处理函数"><a href="#JSON-parse-JSON-stringify-深拷贝，但不能处理函数" class="headerlink" title="JSON.parse(JSON.stringify())(深拷贝，但不能处理函数)"></a><code>JSON.parse(JSON.stringify())</code>(深拷贝，但不能处理函数)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">1</span>, <span class="number">2</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;nyc&#x27;</span> &#125;]</span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(arr))</span><br><span class="line">arr1[<span class="number">2</span>].name = <span class="string">&#x27;json&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="comment">//[ 1, 2, &#123; name: &#x27;nyc&#x27; &#125;]</span></span><br></pre></td></tr></table></figure><h3 id="手动实现深拷贝"><a href="#手动实现深拷贝" class="headerlink" title="手动实现深拷贝"></a>手动实现深拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测数据结构</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkType</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(target).slice(<span class="number">8</span>, <span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 深度克隆</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 检测数据结构</span></span><br><span class="line"><span class="keyword">let</span> result, targetType = checkType(target)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(targetType === <span class="string">&#x27;Array&#x27;</span>) &#123;</span><br><span class="line">result = []</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(targetType === <span class="string">&#x27;Object&#x27;</span>) &#123;</span><br><span class="line">result = &#123;&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> target) &#123;</span><br><span class="line"><span class="comment">// 获取遍历对象中的每一项值</span></span><br><span class="line"><span class="keyword">let</span> value = target[i]</span><br><span class="line"><span class="comment">// 判断是否还存在数组或是对象</span></span><br><span class="line"><span class="keyword">if</span>(checkType(value) === <span class="string">&#x27;Array&#x27;</span> || checkType(value) === <span class="string">&#x27;Object&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">// 继续遍历</span></span><br><span class="line">result[i] = deepClone(value)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result[i] = value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> arr = [ <span class="number">1</span>, <span class="number">2</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;nyc&#x27;</span> &#125; ]</span><br><span class="line"><span class="keyword">let</span> arr1 = deepClone(arr)</span><br><span class="line"><span class="built_in">console</span>.log(arr1, <span class="string">&#x27;arr1&#x27;</span>)</span><br><span class="line"><span class="comment">//[1, 2, &#123; name: &#x27;nyc&#x27; &#125; ] arr1</span></span><br><span class="line">arr1[<span class="number">2</span>].name = <span class="string">&#x27;zxc&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(arr, arr1)</span><br><span class="line"><span class="comment">//[1, 2, &#123; name: &#x27;nyc&#x27; &#125; ] arr    [1, 2, &#123; name: &#x27;zxc&#x27; &#125; ] arr1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;nyc&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;</span><br><span class="line"><span class="keyword">let</span> nobj = deepClone(obj)</span><br><span class="line"><span class="built_in">console</span>.log(nobj)</span><br><span class="line"><span class="comment">//&#123;name: &quot;nyc&quot;, age: 22&#125;</span></span><br><span class="line">nobj.name = <span class="string">&#x27;asdas&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj, nobj)</span><br><span class="line"><span class="comment">//&#123;name: &quot;nyc&quot;, age: 22&#125;   &#123;name: &quot;asdas&quot;, age: 22&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;深浅拷贝&quot;&gt;&lt;a href=&quot;#深浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;深浅拷贝&quot;&gt;&lt;/a&gt;深浅拷贝&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基本数据类型拷贝后，会生成一份新的数据，生成的数据与原数据没有影响。&lt;/li&gt;
&lt;li&gt;对象/数组的拷贝是引用，</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://github.com/NieYongchao/nychao.github.io/categories/JavaScript/"/>
    
    
    <category term="js拷贝" scheme="https://github.com/NieYongchao/nychao.github.io/tags/js%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>Promise，Iterator，Generator，async的用法</title>
    <link href="https://github.com/NieYongchao/nychao.github.io/2020/09/13/Promise%EF%BC%8CIterator%EF%BC%8CGenerator%EF%BC%8Casync%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>https://github.com/NieYongchao/nychao.github.io/2020/09/13/Promise%EF%BC%8CIterator%EF%BC%8CGenerator%EF%BC%8Casync%E7%9A%84%E7%94%A8%E6%B3%95/</id>
    <published>2020-09-13T07:26:45.261Z</published>
    <updated>2020-09-13T07:52:37.159Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>​        Promise 是一个 ECMAScript 6 提供的类，目的是更加优雅地书写复杂的异步任务。可以将异步操作以同步流程表达出来，避免层层回调。Promise是一个构造函数，用来生成promise实例。</p><h4 id="Promise对象的三种状态"><a href="#Promise对象的三种状态" class="headerlink" title="Promise对象的三种状态"></a>Promise对象的三种状态</h4><ul><li>pending: 初始状态。</li><li>fulfilled: 操作成功完成。</li><li>rejected: 操作失败。</li></ul><h4 id="创建Promise对象"><a href="#创建Promise对象" class="headerlink" title="创建Promise对象"></a>创建Promise对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 初始化状态在创建Promise对象时是直接执行的</span></span><br><span class="line"><span class="keyword">const</span> myInfo = &#123;</span><br><span class="line">name: <span class="string">&#x27;nyc&#x27;</span>,</span><br><span class="line">age: <span class="string">&#x27;22&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;初始化状态&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (myInfo.name === <span class="string">&#x27;nyc&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">//当异步代码执行成功时调用resolve()触发成功回调</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;执行成功回调&#x27;</span>)</span><br><span class="line">resolve(myInfo)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//当异步代码失败时就会调用reject()触发失败回调</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;执行失败回调&#x27;</span>)</span><br><span class="line">reject(<span class="string">&#x27;失败了~~&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(value, <span class="string">&#x27;成功了~~&#x27;</span>)</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>成功</p><p><img src="D:\myblogAdmin\themes\butterfly\source\img-particle\success.PNG" alt="捕获"></p><p>失败</p><p><img src="D:\myblogAdmin\themes\butterfly\source\img-particle\failed.PNG" alt="捕获2"></p><h4 id="Promise的缺点"><a href="#Promise的缺点" class="headerlink" title="Promise的缺点"></a>Promise的缺点</h4><ol><li>无法取消 Promise，一旦新建它就会立即执行，无法中途取消。</li><li>如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。</li><li>当处于 Pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</li></ol><h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><p>Iterator 是 ES6 引入的一种新的遍历机制（迭代器），迭代器是一个统一的接口，它的作用是使各种数据结构可被便捷的访问，它是通过一个键为Symbol.iterator 的方法来实现。</p><h4 id="Iterator的工作过程"><a href="#Iterator的工作过程" class="headerlink" title="Iterator的工作过程"></a>Iterator的工作过程</h4><ol><li>创建一个指针对象（遍历器对象），指向数据结构的起始位置。</li><li>第一次调用next()，指针指向数据结构的第一个成员。</li><li>next()返回的是一个对象：{ value: ‘成员值’, done: ‘Boolean’ }</li><li>遍历结束后返回{ value: undefined, done: true }</li></ol><h4 id="可迭代的数据结构"><a href="#可迭代的数据结构" class="headerlink" title="可迭代的数据结构"></a>可迭代的数据结构</h4><ul><li>Array</li><li>String</li><li>Map</li><li>Set</li><li>arguments</li></ul><p>可以使用for…of循环对数据结构进行迭代：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> [ <span class="string">&#x27;nyc&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//nyc</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//3</span></span><br></pre></td></tr></table></figure><h4 id="使用Symbol-iterator创建迭代器"><a href="#使用Symbol-iterator创建迭代器" class="headerlink" title="使用Symbol.iterator创建迭代器"></a>使用Symbol.iterator创建迭代器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> items = [<span class="string">&quot;nie&quot;</span>, <span class="string">&quot;nyc&quot;</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> it = items[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"> </span><br><span class="line">it.next();</span><br><span class="line"><span class="comment">//&#123;value: &quot;nie&quot;, done: false&#125;</span></span><br><span class="line">it.next();</span><br><span class="line"><span class="comment">//&#123;value: &quot;nyc&quot;, done: false&#125;</span></span><br><span class="line">it.next();</span><br><span class="line"><span class="comment">//&#123;value: 1, done: false&#125;</span></span><br><span class="line">it.next();</span><br><span class="line"><span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><p>ES6 新引入了 Generator 函数，是一种解决异步编程的方案之一 用 * 来表示函数为 Generator 函数，特点：</p><ul><li>Generator函数是一个状态机，内部封存了不同状态的数据。</li><li>执行函数返回的是一个遍历器对象(Iterator )。</li><li>调用next()方法往下执行，遇到yield关键字暂停，给next(xxx)传参，参数作为从上一次暂停开始启动的yield的返回值。</li><li>return 方法返回给定值，并结束遍历 Generator 函数，提供参数时，返回该参数；不提供参数时，返回 undefined 。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">myGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;one&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> x = <span class="keyword">yield</span> <span class="string">&#x27;one+暂停&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;two：&#x27;</span> + x)</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;two+暂停&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;three&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGene = myGenerator()</span><br><span class="line"><span class="built_in">console</span>.log(myGene)</span><br><span class="line"><span class="comment">//myGenerator &#123;&lt;suspended&gt;&#125; 是个对象</span></span><br><span class="line"><span class="built_in">console</span>.log(myGene.next())</span><br><span class="line"><span class="comment">//one</span></span><br><span class="line"><span class="comment">//&#123;value: &quot;one+暂停&quot;, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(myGene.next(<span class="string">&#x27;x的值&#x27;</span>))</span><br><span class="line"><span class="comment">//two：x的值</span></span><br><span class="line"><span class="comment">//&#123;value: &quot;two+暂停&quot;, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(myGene.next())</span><br><span class="line"><span class="comment">//three</span></span><br><span class="line"><span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">myGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;one&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> x = <span class="keyword">yield</span> <span class="string">&#x27;one+暂停&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;two：&#x27;</span> + x)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;abc&#x27;</span> <span class="comment">//加上return</span></span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;two+暂停&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;three&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGene = myGenerator()</span><br><span class="line"><span class="built_in">console</span>.log(myGene)</span><br><span class="line"><span class="comment">//myGenerator &#123;&lt;suspended&gt;&#125; 是个对象</span></span><br><span class="line"><span class="built_in">console</span>.log(myGene.next())</span><br><span class="line"><span class="comment">//one</span></span><br><span class="line"><span class="comment">//&#123;value: &quot;one+暂停&quot;, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(myGene.next(<span class="string">&#x27;x的值&#x27;</span>))</span><br><span class="line"><span class="comment">//two：x的值</span></span><br><span class="line"><span class="comment">//&#123;value: &quot;abc&quot;, done: true&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(myGene.next())</span><br><span class="line"><span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><h4 id="为不具备-Iterator-接口的对象提供遍历方法。"><a href="#为不具备-Iterator-接口的对象提供遍历方法。" class="headerlink" title="为不具备 Iterator 接口的对象提供遍历方法。"></a>为不具备 Iterator 接口的对象提供遍历方法。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">objectEntries</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> propKeys = <span class="built_in">Reflect</span>.ownKeys(obj); <span class="comment">//Reflect.ownKeys() 返回对象所有的属性，不管属性是否可枚举，包括 Symbol。是个数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> propKey <span class="keyword">of</span> propKeys) &#123;</span><br><span class="line"><span class="keyword">yield</span> [propKey, obj[propKey]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;nyc&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125; <span class="comment">//obj原生是不具备 Iterator 接口无法通过 for... of遍历</span></span><br><span class="line"><span class="keyword">let</span> res = objectEntries(obj)</span><br><span class="line"><span class="built_in">console</span>.log(res.next())</span><br><span class="line"><span class="comment">//&#123;value: Array(2), done: false&#125;  [&quot;name&quot;, &quot;nyc&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(res.next())</span><br><span class="line"><span class="comment">//&#123;value: Array(2), done: false&#125;  [&quot;age&quot;, &quot;22&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(res.next())</span><br><span class="line"><span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;------&#x27;</span>)</span><br><span class="line"><span class="comment">//------</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [ key, val ] <span class="keyword">of</span> objectEntries(obj)) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>：<span class="subst">$&#123;val&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//name：nyc</span></span><br><span class="line"><span class="comment">//age：22</span></span><br></pre></td></tr></table></figure><h3 id="async，await"><a href="#async，await" class="headerlink" title="async，await"></a>async，await</h3><p>同步流程解决异步回调，本质是Generator函数的语法糖，返回的是promise对象，可以使用.then()进行下一步操作。await后面如果是Promise 对象，则等待 Promise 对象 resolve，然后恢复 async 函数的执行并返回解析值，非Promise对象，直接返回对应的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> res = <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;成功回调数据：&#x27;</span> + name)</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="string">&#x27;nyc&#x27;</span>)</span><br><span class="line"><span class="comment">//成功回调数据：nyc</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h3&gt;&lt;p&gt;​        Promise 是一个 ECMAScript 6 提供的类，目的是更加优雅地书写复</summary>
      
    
    
    
    <category term="ES6" scheme="https://github.com/NieYongchao/nychao.github.io/categories/ES6/"/>
    
    
    <category term="ES6" scheme="https://github.com/NieYongchao/nychao.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>js数据类型</title>
    <link href="https://github.com/NieYongchao/nychao.github.io/2020/09/13/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://github.com/NieYongchao/nychao.github.io/2020/09/13/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-09-13T07:26:45.258Z</published>
    <updated>2020-09-13T07:53:59.346Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据类型分类"><a href="#数据类型分类" class="headerlink" title="数据类型分类"></a>数据类型分类</h3><p>​        值类型(基本类型)：字符串（String）、数字(Number)、布尔值(Boolean)、对空（Null）、未定义（Undefined）、Symbol;引用数据类型：对象(Object)、数组(Array)、函数(Function)。</p><h3 id="判断方式"><a href="#判断方式" class="headerlink" title="判断方式"></a>判断方式</h3><ol><li><p><code>typeof</code> 返回数据类型的字符串表达，对于null, array, object都会返回object，不能具体判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">&#x27;nyc&#x27;</span>) <span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">123</span>) <span class="comment">//number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">true</span>) <span class="comment">//boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;) <span class="comment">// function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>) <span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> &#123;<span class="attr">name</span>: <span class="string">&#x27;nyc&#x27;</span>&#125;) <span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> [<span class="number">1</span>,<span class="string">&#x27;string&#x27;</span>,&#123;<span class="attr">name</span>: <span class="string">&#x27;nie&#x27;</span>&#125;]) <span class="comment">//object</span></span><br></pre></td></tr></table></figure></li><li><p><code>instanceof</code> 可以判断对象的具体类型 返回布尔值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b1 = &#123;</span><br><span class="line">    b2: [ <span class="number">1</span>, <span class="string">&#x27;nyc&#x27;</span>, <span class="built_in">console</span>.log ],</span><br><span class="line">    b3: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;b3&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">console</span>.log(b1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>, b1 <span class="keyword">instanceof</span> <span class="built_in">Array</span>) <span class="comment">//true false</span></span><br><span class="line"><span class="built_in">console</span>.log(b1.b2 <span class="keyword">instanceof</span> <span class="built_in">Object</span>, b1.b2 <span class="keyword">instanceof</span> <span class="built_in">Array</span>) <span class="comment">//true true</span></span><br><span class="line"><span class="built_in">console</span>.log(b1.b3 <span class="keyword">instanceof</span> <span class="built_in">Object</span>, b1.b3 <span class="keyword">instanceof</span> <span class="built_in">Function</span>) <span class="comment">//true true</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>数据类型</p><ul><li>基本类型</li><li>对象类型</li></ul><p>变量类型</p><ul><li><p>基本类型（保存基本类型的值）</p></li><li><p>引用类型（保存对象类型的地址值）</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;数据类型分类&quot;&gt;&lt;a href=&quot;#数据类型分类&quot; class=&quot;headerlink&quot; title=&quot;数据类型分类&quot;&gt;&lt;/a&gt;数据类型分类&lt;/h3&gt;&lt;p&gt;​        值类型(基本类型)：字符串（String）、数字(Number)、布尔值(Boolean)</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://github.com/NieYongchao/nychao.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://github.com/NieYongchao/nychao.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
